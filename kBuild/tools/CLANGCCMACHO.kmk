# $Id: CLANGCCMACHO.kmk 3580 2023-01-05 02:16:42Z bird $
## @file
# kBuild Tool Config - LLVM Clang targeting Darwin (Mac OS X) Mach-O, for building C code.
#

#
# Copyright (c) 2004-2020 knut st. osmundsen <bird-kBuild-spam-xviiv@anduin.net>
#
# This file is part of kBuild.
#
# kBuild is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# kBuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with kBuild; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
# As a special exception you are granted permission to include this file, via
# the kmk include directive, as you wish without this in itself causing the
# resulting makefile, program or whatever to be covered by the GPL license.
# This exception does not however invalidate any other reasons why the makefile,
# program, whatever should not be covered the GPL.
#
#

ifndef INCLUDED_DARWIN_COMMON_KMK
 include $(KBUILD_PATH)/darwin-common.kmk
endif

TOOL_CLANGCCMACHO := LLVM Clang targeting Darwin (Mac OS X) Mach-O, for building C code.

# Tool Specific Properties
# PREFIX/SUFFIX: clang;   PREFIX2/SUFFIX2: cctool;
ifndef PATH_TOOL_CLANGCCMACHO
 PATH_TOOL_CLANGCCMACHO := $(substr $(firstfile $(foreachfile toolchaindir, $(DARWINCMN_TOOLCHAIN_DIRS) \
 	, $(qwildcard ,$(toolchaindir)/usr/bin/clang++))), 1, -12)
else
 PATH_TOOL_CLANGCCMACHO := $(PATH_TOOL_CLANGCCMACHO)
endif
ifndef TOOL_CLANGCCMACHO_PREFIX
 ifdef PATH_TOOL_CLANGCCMACHO
  TOOL_CLANGCCMACHO_PREFIX  := $(PATH_TOOL_CLANGCCMACHO)/bin/
 else
  TOOL_CLANGCCMACHO_PREFIX  :=
 endif
endif
ifndef TOOL_CLANGCCMACHO_SUFFIX
 TOOL_CLANGCCMACHO_SUFFIX   := $(HOSTSUFF_EXE)
endif
TOOL_CLANGCCMACHO_PREFIX2   ?= $(TOOL_CLANGCCMACHO_PREFIX)
TOOL_CLANGCCMACHO_SUFFIX2   ?= $(TOOL_CLANGCCMACHO_SUFFIX)
TOOL_CLANGCCMACHO_CC        ?= $(TOOL_CLANGCCMACHO_PREFIX)clang$(TOOL_CLANGCCMACHO_SUFFIX)
TOOL_CLANGCCMACHO_CXX       ?= $(TOOL_CLANGCCMACHO_PREFIX)clang++$(TOOL_CLANGCCMACHO_SUFFIX)
TOOL_CLANGCCMACHO_PCH       ?= $(TOOL_CLANGCCMACHO_CXX)
TOOL_CLANGCCMACHO_OBJC      ?= $(TOOL_CLANGCCMACHO_PREFIX)clang$(TOOL_CLANGCCMACHO_SUFFIX)
TOOL_CLANGCCMACHO_OBJCXX    ?= $(TOOL_CLANGCCMACHO_PREFIX)clang$(TOOL_CLANGCCMACHO_SUFFIX)
TOOL_CLANGCCMACHO_AS        ?= $(TOOL_CLANGCCMACHO_PREFIX)clang$(TOOL_CLANGCCMACHO_SUFFIX)
TOOL_CLANGCCMACHO_LD        ?= $(TOOL_CLANGCCMACHO_PREFIX)clang$(TOOL_CLANGCCMACHO_SUFFIX)
TOOL_CLANGCCMACHO_LD_SYSMOD ?= $(TOOL_CLANGCCMACHO_PREFIX)clang$(TOOL_CLANGCCMACHO_SUFFIX)
TOOL_CLANGCCMACHO_LDFLAGS.dll ?= -dynamiclib
TOOL_CLANGCCMACHO_LDFLAGS.sysmod ?= -r
#TOOL_CLANGCCMACHO_LD_SONAME = -Wl,-dylib_install_name $(firstword $($(1)_SONAME.$(KBUILD_TARGET).$(KBUILD_TYPE)) $($(1)_SONAME.$(KBUILD_TARGET)) $($(1)_SONAME.$(KBUILD_TYPE)) $($(1)_SONAME) $(notdir $(2)))
TOOL_CLANGCCMACHO_DSYMUTIL  ?= $(TOOL_CLANGCCMACHO_PREFIX)dsymutil$(TOOL_CLANGCCMACHO_SUFFIX)

TOOL_CLANGCCMACHO_AR        ?= $(TOOL_CLANGCCMACHO_PREFIX2)ar$(TOOL_CLANGCCMACHO_SUFFIX2)
TOOL_CLANGCCMACHO_STRIP     ?= $(TOOL_CLANGCCMACHO_PREFIX2)strip$(TOOL_CLANGCCMACHO_SUFFIX2)
TOOL_CLANGCCMACHO_STRIP_PROGRAM ?= $(TOOL_CLANGCCMACHO_STRIP) -SXxru
TOOL_CLANGCCMACHO_STRIP_DLL     ?= $(TOOL_CLANGCCMACHO_STRIP) -Sxru
TOOL_CLANGCCMACHO_STRIP_SYSMOD  ?= $(TOOL_CLANGCCMACHO_STRIP) -Sru

# General Properties used by kBuild
TOOL_CLANGCCMACHO_COBJSUFF         ?= .o
TOOL_CLANGCCMACHO_CFLAGS           ?=
TOOL_CLANGCCMACHO_CFLAGS.debug     ?= -g
TOOL_CLANGCCMACHO_CFLAGS.profile   ?= -O2 #-g -pg
TOOL_CLANGCCMACHO_CFLAGS.release   ?= -O2
TOOL_CLANGCCMACHO_CINCS            ?=
TOOL_CLANGCCMACHO_CDEFS            ?=

TOOL_CLANGCCMACHO_CXXOBJSUFF       ?= .o
TOOL_CLANGCCMACHO_CXXFLAGS         ?=
TOOL_CLANGCCMACHO_CXXFLAGS.debug   ?= -g
TOOL_CLANGCCMACHO_CXXFLAGS.profile ?= -O2 #-g -pg
TOOL_CLANGCCMACHO_CXXFLAGS.release ?= -O2
TOOL_CLANGCCMACHO_CXXINCS          ?=
TOOL_CLANGCCMACHO_CXXDEFS          ?=

TOOL_CLANGCCMACHO_PCHOBJSUFF       ?= .h.gch
TOOL_CLANGCCMACHO_PCHFLAGS         ?= $(TOOL_CLANGCCMACHO_CXXFLAGS)
TOOL_CLANGCCMACHO_PCHFLAGS.debug   ?= $(TOOL_CLANGCCMACHO_CXXFLAGS.debug)
TOOL_CLANGCCMACHO_PCHFLAGS.profile ?= $(TOOL_CLANGCCMACHO_CXXFLAGS.profile)
TOOL_CLANGCCMACHO_PCHFLAGS.release ?= $(TOOL_CLANGCCMACHO_CXXFLAGS.release)
TOOL_CLANGCCMACHO_PCHINCS          ?= $(TOOL_CLANGCCMACHO_CXXINCS)
TOOL_CLANGCCMACHO_PCHDEFS          ?= $(TOOL_CLANGCCMACHO_CXXDEFS)

TOOL_CLANGCCMACHO_OBJCOBJSUFF      ?= .o
TOOL_CLANGCCMACHO_OBJCFLAGS        ?=
TOOL_CLANGCCMACHO_OBJCFLAGS.debug  ?= -g
TOOL_CLANGCCMACHO_OBJCFLAGS.profile?= -O2 #-g -pg
TOOL_CLANGCCMACHO_OBJCFLAGS.release?= -O2
TOOL_CLANGCCMACHO_OBJCINCS         ?=
TOOL_CLANGCCMACHO_OBJCDEFS         ?=

TOOL_CLANGCCMACHO_OBJCXXOBJSUFF        ?= .o
TOOL_CLANGCCMACHO_OBJCXXFLAGS          ?=
TOOL_CLANGCCMACHO_OBJCXXFLAGS.debug    ?= -g
TOOL_CLANGCCMACHO_OBJCXXFLAGS.profile  ?= -O2 #-g -pg
TOOL_CLANGCCMACHO_OBJCXXFLAGS.release  ?= -O2
TOOL_CLANGCCMACHO_OBJCXXINCS           ?=
TOOL_CLANGCCMACHO_OBJCXXDEFS           ?=

TOOL_CLANGCCMACHO_ASFLAGS          ?= -x assembler-with-cpp
TOOL_CLANGCCMACHO_ASFLAGS.debug    ?= -g
TOOL_CLANGCCMACHO_ASFLAGS.profile  ?= -g
TOOL_CLANGCCMACHO_ASOBJSUFF        ?= .o

TOOL_CLANGCCMACHO_ARFLAGS          ?= -c -rs
TOOL_CLANGCCMACHO_ARLIBSUFF        ?= .a

TOOL_CLANGCCMACHO_LDFLAGS          ?=
TOOL_CLANGCCMACHO_LDFLAGS.debug    ?= -g
TOOL_CLANGCCMACHO_LDFLAGS.profile  ?= -g



##
# Calculate the files in the debug bundle.
# @param    1  The whole output filename.
# @param    2  The output filename sans suffix.
TOOL_CLANGCCMACHO_DEBUG_BUNDLE_FN = \
    $(1).dSYM/Contents/Info.plist \
    $(1).dSYM/Contents/Resources/DWARF/$(notdir $(1))

##
# Calculate the files in the debug bundle.
# @param    1  The whole linker output filename.
# @param    2  The linker output filename sans suffix.
# @param    3  The desired install name (no dir slash).
# @remarks  The Info.plist has some reference to the original name, but gdb
#           does not care and only check for a symbol file in the DWARF
#           directory with the same name as the debugged module.
TOOL_CLANGCCMACHO_DEBUG_INSTALL_FN= \
    $(3).dSYM/ \
    $(3).dSYM/Contents/ \
    $(3).dSYM/Contents/Resources/ \
    $(3).dSYM/Contents/Resources/DWARF/ \
    $(1).dSYM/Contents/Info.plist=>$(3).dSYM/Contents/Info.plist \
    $(1).dSYM/Contents/Resources/DWARF/$(notdir $(1))=>$(3).dSYM/Contents/Resources/DWARF/$(notdir $(3))


## Compile C source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
#
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_CLANGCCMACHO_COMPILE_C_DEPEND =
TOOL_CLANGCCMACHO_COMPILE_C_DEPORD =
TOOL_CLANGCCMACHO_COMPILE_C_OUTPUT         = $(if-expr "$(use_objcache)" != "",$(outbase).i,)
TOOL_CLANGCCMACHO_COMPILE_C_USES_KOBJCACHE = $(if-expr "$(use_objcache)" != "",1,)
define TOOL_CLANGCCMACHO_COMPILE_C_CMDS
if "$(use_objcache)" != ""
	$(QUIET)$(KOBJCACHE) -f $(outbase).koc -d $(PATH_OBJCACHE) -t $(bld_trg).$(bld_trg_arch) -p\
		--kObjCache-cpp $(outbase).i\
		$(TOOL_CLANGCCMACHO_CC) -E -o -\
		$(flags) $(qaddprefix sh,-I, $(incs)) $(qaddprefix sh,-D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		$(abspath $(source))\
		--kObjCache-cc $(obj)\
		$(TOOL_CLANGCCMACHO_CC) -c\
		$(flags) -fpreprocessed -x c\
		-o $(obj)\
		-
else
	$(QUIET)$(TOOL_CLANGCCMACHO_CC) -c\
		$(flags) $(qaddprefix sh,-I, $(incs)) $(qaddprefix sh,-D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
endif
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef


## Compile C++ source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_CLANGCCMACHO_COMPILE_CXX_OUTPUT         = $(if-expr "$(use_objcache)" != "",$(outbase).ii,)
TOOL_CLANGCCMACHO_COMPILE_CXX_DEPEND         = $($(target)_1_GCC_PCH_FILE)
TOOL_CLANGCCMACHO_COMPILE_CXX_DEPORD         =
TOOL_CLANGCCMACHO_COMPILE_CXX_USES_KOBJCACHE = $(if-expr "$(use_objcache)" != "",1,)
define TOOL_CLANGCCMACHO_COMPILE_CXX_CMDS
if "$(use_objcache)" != ""
	$(QUIET)$(KOBJCACHE) -f $(outbase).koc -d $(PATH_OBJCACHE) -t $(bld_trg).$(bld_trg_arch) -p\
		--kObjCache-cpp $(outbase).ii\
		$(TOOL_CLANGCCMACHO_CXX) -E -o - $(if-expr defined($(target)_PCH_HDR)\
		,-fpch-preprocess -Winvalid-pch -I$($(target)_1_GCC_PCH_DIR) -include $(basename $($(target)_1_GCC_PCH_FILE)),)\
		$(flags) $(qaddprefix sh,-I, $(incs)) $(qaddprefix sh,-D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		$(abspath $(source))\
		--kObjCache-cc $(obj)\
		$(TOOL_CLANGCCMACHO_CXX) -c\
		$(flags) -fpreprocessed $(if-expr defined($(target)_PCH_HDR),-fpch-preprocess,) -x c++\
		-o $(obj)\
		-
else
	$(QUIET)$(TOOL_CLANGCCMACHO_CXX) -c\
		$(flags) $(qaddprefix sh,-I, $($(target)_1_GCC_PCH_DIR) $(incs)) $(qaddprefix sh,-D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj) $(if-expr defined($(target)_PCH_HDR) \
		,-Winvalid-pch -include $(basename $($(target)_1_GCC_PCH_FILE)),) \
		$(abspath $(source))
endif
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef


## Precompile C++ header.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_CLANGCCMACHO_COMPILE_PCH_OUTPUT = $($(target)_1_GCC_PCH_FILE)
TOOL_CLANGCCMACHO_COMPILE_PCH_DEPEND =
TOOL_CLANGCCMACHO_COMPILE_PCH_DEPORD = $($(target)_1_GCC_PCH_DIR)
define TOOL_CLANGCCMACHO_COMPILE_PCH_CMDS
	$(QUIET)$(TOOL_CLANGCCMACHO_PCH) -c\
		$(flags) $(qaddprefix sh,-I, $($(target)_1_GCC_PCH_DIR) $(incs)) $(qaddprefix sh,-D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
	$(INSTALL) --hard-link-files-when-possible -m 0644 -- "$(obj)" "$($(target)_1_GCC_PCH_FILE)"
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef


## Compile Objective-C source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_CLANGCCMACHO_COMPILE_OBJC_DEPEND =
TOOL_CLANGCCMACHO_COMPILE_OBJC_DEPORD =
ifdef KBUILD_USE_KOBJCACHE
TOOL_CLANGCCMACHO_COMPILE_OBJC_USES_KOBJCACHE = 1
TOOL_CLANGCCMACHO_COMPILE_OBJC_OUTPUT = $(outbase).mi
define TOOL_CLANGCCMACHO_COMPILE_OBJC_CMDS
	$(QUIET)$(KOBJCACHE) -f $(outbase).koc -d $(PATH_OBJCACHE) -t $(bld_trg).$(bld_trg_arch) -p\
		--kObjCache-cpp $(outbase).ii\
		$(TOOL_CLANGCCMACHO_OBJC) -E -o -\
		$(flags) $(qaddprefix sh,-I, $(incs)) $(qaddprefix sh,-D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		$(abspath $(source))\
		--kObjCache-cc $(obj)\
		$(TOOL_CLANGCCMACHO_OBJC) -c\
		$(flags) -fpreprocessed -x objective-c \
		-o $(obj)\
		-
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef
else  # !KBUILD_USE_KOBJCACHE
TOOL_CLANGCCMACHO_COMPILE_OBJC_OUTPUT =
define TOOL_CLANGCCMACHO_COMPILE_OBJC_CMDS
	$(QUIET)$(TOOL_CLANGCCMACHO_OBJC) -c\
		$(flags) $(qaddprefix sh,-I, $(incs)) $(qaddprefix sh,-D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef
endif # !KBUILD_USE_KOBJCACHE


## Compile Objective-C++ source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)	    Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)		Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
TOOL_CLANGCCMACHO_COMPILE_OBJCXX_DEPEND =
TOOL_CLANGCCMACHO_COMPILE_OBJCXX_DEPORD =
ifdef KBUILD_USE_KOBJCACHE
TOOL_CLANGCCMACHO_COMPILE_OBJCXX_USES_KOBJCACHE = 1
TOOL_CLANGCCMACHO_COMPILE_OBJCXX_OUTPUT = $(outbase).mii
define TOOL_CLANGCCMACHO_COMPILE_OBJCXX_CMDS
	$(QUIET)$(KOBJCACHE) -f $(outbase).koc -d $(PATH_OBJCACHE) -t $(bld_trg).$(bld_trg_arch) -p\
		--kObjCache-cpp $(outbase).mii\
		$(TOOL_CLANGCCMACHO_OBJCXX) -E -o -\
		$(flags) $(qaddprefix sh,-I, $(incs)) $(qaddprefix sh,-D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		$(abspath $(source))\
		--kObjCache-cc $(obj)\
		$(TOOL_CLANGCCMACHO_OBJCXX) -c\
		$(flags) -fpreprocessed -x objective-c++ \
		-o $(obj)\
		-
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef
else  # !KBUILD_USE_KOBJCACHE
TOOL_CLANGCCMACHO_COMPILE_OBJCXX_OUTPUT =
define TOOL_CLANGCCMACHO_COMPILE_OBJCXX_CMDS
	$(QUIET)$(TOOL_CLANGCCMACHO_OBJCXX) -c\
		$(flags) $(qaddprefix sh,-I, $(incs)) $(qaddprefix sh,-D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef
endif # !KBUILD_USE_KOBJCACHE


## Compile Assembly source.
# @param    $(target)   Normalized main target name.
# @param    $(source)   Source filename (relative).
# @param    $(obj)      Object file name. This shall be (re)created by the compilation.
# @param    $(dep)      Dependcy file. This shall be (re)created by the compilation.
# @param    $(flags)    Flags.
# @param    $(defs)     Definitions. No -D or something.
# @param    $(incs)     Includes. No -I or something.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
# @param    $(objsuff)  Object suffix.
#
TOOL_CLANGCCMACHO_COMPILE_AS_OUTPUT =
TOOL_CLANGCCMACHO_COMPILE_AS_DEPEND =
TOOL_CLANGCCMACHO_COMPILE_AS_DEPORD =
define TOOL_CLANGCCMACHO_COMPILE_AS_CMDS
	$(QUIET)$(TOOL_CLANGCCMACHO_AS) -c\
		$(flags) $(qaddprefix sh,-I, $(incs)) $(qaddprefix sh,-D, $(defs))\
		-Wp,-MD,$(dep) -Wp,-MT,$(obj) -Wp,-MP\
		-o $(obj)\
		$(abspath $(source))
	$(QUIET)$(APPEND) -n "$(dep)" "" "$(source):" ""
endef


## Link library
# @param    $(target)   Normalized main target name.
# @param    $(out)      Library name.
# @param    $(objs)     Object files to put in the library.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_CLANGCCMACHO_LINK_LIBRARY_OUTPUT =
TOOL_CLANGCCMACHO_LINK_LIBRARY_DEPEND = $(othersrc)
TOOL_CLANGCCMACHO_LINK_LIBRARY_DEPORD =
define TOOL_CLANGCCMACHO_LINK_LIBRARY_CMDS
	$(if $(strip $(filter-out %.h.gch,$(objs))),$(call xargs,$(QUIET)$(TOOL_CLANGCCMACHO_AR) $(flags) $(out),$(filter-out %.h.gch,$(objs))))
	$(foreach lib,$(othersrc)\
		,$(NL)$(TAB)$(call MSG_AR_MERGE,$(target),$(out),$(lib)) \
		$(NL)$(TAB)$(QUIET)$(RM_EXT) -f $(dir $(outbase))ar.tmp.dir/* \
		$(NL)$(TAB)$(QUIET)$(MKDIR) -p $(dir $(outbase))/ar.tmp.dir/ \
		$(NL)$(TAB)$(QUIET)(cd $(dir $(outbase))ar.tmp.dir/ \
			&& $(TOOL_CLANGCCMACHO_AR) -x $(abspath $(lib)) \
		    && $(RM_EXT) -f ./__.SYMDEF* \
			&& $(TOOL_CLANGCCMACHO_AR) $(flags) $(out) *) \
		$(NL)$(TAB)$(QUIET)$(RM_EXT) -f $(dir $(outbase))/ar.tmp.dir/* \
		$(NL)$(TAB)$(QUIET)$(RMDIR) $(dir $(outbase))ar.tmp.dir/)
endef


## Link program
# @param    $(target)   Normalized main target name.
# @param    $(out)      Program name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_CLANGCCMACHO_LINK_PROGRAM_OUTPUT_MAYBE_PRECIOUS = $(outbase).rsp
TOOL_CLANGCCMACHO_LINK_PROGRAM_OUTPUT_DEBUG = $(call TOOL_CLANGCCMACHO_DEBUG_BUNDLE_FN,$(out))
TOOL_CLANGCCMACHO_LINK_PROGRAM_DEBUG_INSTALL_FN = $(TOOL_CLANGCCMACHO_DEBUG_INSTALL_FN)
TOOL_CLANGCCMACHO_LINK_PROGRAM_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_CLANGCCMACHO_LINK_PROGRAM_DEPORD =
define TOOL_CLANGCCMACHO_LINK_PROGRAM_CMDS
	$(QUIET)$(APPEND) -tn $(outbase).rsp $(filter-out %.h.gch,$(objs))
	$(QUIET)$(TOOL_CLANGCCMACHO_LD) $(flags) -o $(out)\
		-filelist $(outbase).rsp\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(lib)), $(lib)))
 ifeq ($(ld_debug),split)
	$(QUIET)$(TOOL_CLANGCCMACHO_DSYMUTIL) -o $(out).dSYM/ $(out)
	$(QUIET)$(TOOL_CLANGCCMACHO_STRIP_PROGRAM) $(out)
 endif
endef


## Link DLL
# @param    $(target)   Normalized main target name.
# @param    $(out)      Program name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_CLANGCCMACHO_LINK_DLL_OUTPUT_MAYBE_PRECIOUS = $(outbase).rsp
TOOL_CLANGCCMACHO_LINK_DLL_OUTPUT_DEBUG = $(call TOOL_CLANGCCMACHO_DEBUG_BUNDLE_FN,$(out))
TOOL_CLANGCCMACHO_LINK_DLL_DEBUG_INSTALL_FN = $(TOOL_CLANGCCMACHO_DEBUG_INSTALL_FN)
TOOL_CLANGCCMACHO_LINK_DLL_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_CLANGCCMACHO_LINK_DLL_DEPORD =
define TOOL_CLANGCCMACHO_LINK_DLL_CMDS
	$(QUIET)$(APPEND) -tn $(outbase).rsp $(filter-out %.h.gch,$(objs))
	$(QUIET)$(TOOL_CLANGCCMACHO_LD) $(TOOL_CLANGCCMACHO_LDFLAGS.dll) $(flags) -o $(out)\
		$(call TOOL_CLANGCCMACHO_LD_SONAME,$(target),$(out))\
		-filelist $(outbase).rsp\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(lib)), $(lib)))
 ifeq ($(ld_debug),split)
	$(QUIET)$(TOOL_CLANGCCMACHO_DSYMUTIL) -o $(out).dSYM/ $(out)
	$(QUIET)$(TOOL_CLANGCCMACHO_STRIP_DLL) $(out)
 endif
endef


## Link system module (windows aka driver, linux aka kernel module)
# @param    $(target)   Normalized main target name.
# @param    $(out)      System module name.
# @param    $(objs)     Object files to link together.
# @param    $(libs)     Libraries to search.
# @param    $(libpath)  Library search paths.
# @param    $(flags)    Flags.
# @param    $(dirdep)   Directory creation dependency.
# @param    $(deps)     Other dependencies.
# @param    $(othersrc) Unhandled sources.
# @param    $(custom_pre)   Custom step invoked before linking.
# @param    $(custom_post)  Custom step invoked after linking.
# @param    $(outbase)  Output basename (full). Use this for list files and such.
TOOL_CLANGCCMACHO_LINK_SYSMOD_OUTPUT_MAYBE_PRECIOUS = $(outbase).rsp
TOOL_CLANGCCMACHO_LINK_SYSMOD_OUTPUT_DEBUG = $(call TOOL_CLANGCCMACHO_DEBUG_BUNDLE_FN,$(out))
TOOL_CLANGCCMACHO_LINK_SYSMOD_DEBUG_INSTALL_FN = $(TOOL_CLANGCCMACHO_DEBUG_INSTALL_FN)
TOOL_CLANGCCMACHO_LINK_SYSMOD_DEPEND = $(foreach lib,$(libs),$(if $(findstring $(lib),$(subst /,x,$(lib))),, $(lib)))
TOOL_CLANGCCMACHO_LINK_SYSMOD_DEPORD =
define TOOL_CLANGCCMACHO_LINK_SYSMOD_CMDS
	$(QUIET)$(APPEND) -tn $(outbase).rsp $(filter-out %.h.gch,$(objs))
	$(QUIET)$(TOOL_CLANGCCMACHO_LD_SYSMOD) $(TOOL_CLANGCCMACHO_LDFLAGS.sysmod) $(flags) -o $(out)\
		-filelist $(outbase).rsp\
		$(foreach p,$(libpath), -L$(p))\
		$(foreach lib,$(libs), $(if $(findstring $(lib),$(subst /,x,$(lib))), -l$(patsubst lib%,%,$(lib)), $(lib)))
 ifeq ($(ld_debug),split)
	$(QUIET)$(TOOL_CLANGCCMACHO_DSYMUTIL) -o $(out).dSYM/ $(out)
	$(QUIET)$(TOOL_CLANGCCMACHO_STRIP_SYSMOD) $(out)
 endif
endef

